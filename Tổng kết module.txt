Typescript:



# Basic
-> Setup
npm install -g typescript => với các editor hỗ trợ sẵn typescript thì k cần phải cài như VS chẳng hạn vì Microsoft tạo ra typescript nên họ tích hợp sẵn luôn trong VS của họ

biên dịch: tsc <link tới file .ts>  => sinh ra file js sau biên dịch
=> có thể sang file js để xem code nó như nào

Để dùng typescript với react, ta phải uninstall cái global create-react-app hiện tại và cài đặt lại:
yarn global remove create-react-app 
yarn create react-app my-app --template typescript
Còn nếu muốn add vào 1 dự án đã có sẵn thì dùng:
yarn add typescript @types/node @types/react @types/react-dom @types/jest
sau đó đổi tên các file thành .ts là xong

Bộ CRA (create-react-app) là bộ tạo dự án react nổi tiếng nhất

Dùng npm:
npx create-react-app <name-project> --template typecript
Nếu ta từng cái global CRA thì phải npm uninstall -g create-react-app đi trước

=> Thực tế khi dùng với html css js thuần mà kèm typescript vào lỗi rất nhiều. Nên dùng với các dự án chuẩn chuyên typescript thay thế hoàn toàn JS thôi

-> Dùng typescript với React
File tsconfig.json chứa thông tin config của typescript, ta có thể chỉnh phiên bản hay các thứ

Typescript thực chất làm JS chặt chẽ hơn về type thôi. Trong ReactJS có lib props-type cũng giúp kiểm soát type các component ok



# Các option:
-> "allowSyntheticDefaultImports": true, trong tsconfig giúp import được như bth: import React from "react";
Nếu k có buộc phải dùng: import * as React from "react"; với default export

-> "isolatedModules": true, 
--> Trong typscript mặc định mọi file ts đều phải có export để lấy ra ngoài (ES6, còn common js của nodejs ta k xét)
option isolatedModules sẽ check lỗi này, nếu 1 file k có export thì sẽ báo lỗi. Bỏ options này đi cũng được thôi, sẽ k báo lỗi nhưng 1 file ts k có export thì vô dụng chả làm được gì
=> Lưu ý là file typescript buộc có export nhưng khi import k được có extenction.ts mà nó tự hiểu. Nếu dùng file js thì thoải mái k có vấn đề gì

--> Tùy vào config tsconfig và webpack mà có thể import export trong react typescript gây lỗi: 
Tạo react typescript bằng CRA, ta có thể import image tùy ý mà k cần đuôi file extension cũng như khai báo module gì
VD: import logo from "./logo";
Tạo react typescript bằng 1 số cách khác như trong sharepoint, ta phải import image from "./logo.svg"; và trong phải có 1 file.d.ts khai báo: declare module "*.svg" tương tự với từng loại ảnh sử dụng

Đôi khi việc khai báo index.d.ts nó k hoạt động vì typescript compiler do config gì đó mà nghĩ rằng file này phải được sinh ra tự động từ index.tsx => nên các file tự khai báo module riêng, ta nên đặt cho nó 1 cái tên khác kiểu declaration.d.ts hay bất cứ gì cũng được, tránh tên index ra

File .d.ts luôn được sinh ra tự động trong typescript, nhưng khi dự án có cả code JS và TS, nó có vai trò làm cầu nối và nhiều TH ta buộc phải sử dụng để tránh lỗi k import được.

-> baseUrl đôi lúc phải restart vscode mới có tác dụng. Dùng baseUrl là ta có thể import trực tiếp từ thư mục nó xác định trở đi mà k cần làm gì thêm. Chỉ thêm attribute path nếu ta muốn thêm tiền tố cho nó VD @ chẳng hạn
"baseUrl": ".",
"paths": {
    "@/*": ["./src/*"],
    "@/public/*": ["./public/*"]
}

# Dùng ! or ?
Trong HTML từng thẻ đều có type riêng như HTMLElement



# Setup file tsconfig.json
=> refer tới "Projects / MoveWorld"

Lệnh tsc sẽ compile mặc định mọi file ts kể từ thư mục hiện tại, nếu chạy cụ thể tsc 1 file nào đó như bth sẽ bỏ qua tsconfig.json => điều này làm 1 vài options cần có bị thiếu dẫn đến lỗi k thể compile trong 1 số TH
VD: Viết tsconfig.json -> compilerOptions có "outDir": "js" -> chạy lệnh tsc (k có tham số gì hết mới được) => toàn bộ file js được compile ra trong thư mục js
